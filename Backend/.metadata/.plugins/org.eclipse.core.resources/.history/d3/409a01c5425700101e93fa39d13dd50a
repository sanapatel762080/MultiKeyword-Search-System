package com.securesystem.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.securesystem.dto.FileResponse;
import com.securesystem.model.FileData;
import com.securesystem.repository.FileRepository;
import com.securesystem.util.EncryptionUtil;

@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "http://localhost:3000")
public class FileController {

    @Autowired
    private FileRepository fileRepo;

    @PostMapping("/upload")
    public String uploadFile(@RequestParam MultipartFile file,
                             @RequestParam String keywords,
                             @RequestParam String email) {
        try {
            FileData fileData = new FileData();
            fileData.setFilename(file.getOriginalFilename());
            fileData.setContent(file.getBytes());
            fileData.setEncryptedKeywords(EncryptionUtil.encryptKeywords(keywords));
            fileData.setUploadedBy(email);

            fileRepo.save(fileData);
            return "File uploaded successfully!";
        } catch (Exception e) {
            e.printStackTrace();
            return "Upload failed.";
        }
    }

    
    @GetMapping("/user-files")
    public List<FileResponse> getUserFiles(@RequestParam String email) {
        List<FileData> files = fileRepo.findByUploadedBy(email);

        return files.stream()
                .map(f -> new FileResponse(
                    f.getId(),
                    f.getFilename(),
                    f.getEncryptedKeywords(),
                    f.getUploadedBy()
                ))
                .collect(Collectors.toList());
    }

    
    

}

