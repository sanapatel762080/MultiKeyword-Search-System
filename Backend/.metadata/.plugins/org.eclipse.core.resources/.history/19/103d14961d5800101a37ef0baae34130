package com.securesystem.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.securesystem.dto.FileResponse;
import com.securesystem.dto.UserUploadStat;
import com.securesystem.model.FileData;
import com.securesystem.repository.FileRepository;
import com.securesystem.util.EncryptionUtil;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.ContentDisposition;

import java.util.Optional;



@RestController
@RequestMapping("/api")
@CrossOrigin(origins = "http://localhost:3000")
public class FileController {

    @Autowired
    private FileRepository fileRepo;

    @PostMapping("/upload")
    public String uploadFile(@RequestParam MultipartFile file,
                             @RequestParam String keywords,
                             @RequestParam String email) {
        try {
            FileData fileData = new FileData();
            fileData.setFilename(file.getOriginalFilename());
            fileData.setContent(file.getBytes());

            // üîê Clean and encrypt keywords
            fileData.setEncryptedKeywords(EncryptionUtil.encryptKeywords(keywords));

            fileData.setUploadedBy(email);
            fileRepo.save(fileData);

            return "File uploaded successfully!";
        } catch (Exception e) {
            e.printStackTrace();
            return "Upload failed.";
        }
    }
    
    @GetMapping("/user-files")
    public List<FileResponse> getUserFiles(@RequestParam String email) {
        List<FileData> files = fileRepo.findByUploadedBy(email);

        return files.stream()
                .map(f -> new FileResponse(
                    f.getId(),
                    f.getFilename(),
                    f.getEncryptedKeywords(),
                    f.getUploadedBy()
                ))
                .collect(Collectors.toList());
    }
    
    @GetMapping("/all-files")
    public List<FileResponse> getAllFiles() {
        List<FileData> files = fileRepo.findAll();

        return files.stream()
                .map(f -> new FileResponse(
                    f.getId(),
                    f.getFilename(),
                    f.getEncryptedKeywords(),
                    f.getUploadedBy()
                ))
                .collect(Collectors.toList());
    }
    
    @DeleteMapping("/delete-file/{id}")
    public String deleteFile(@PathVariable Long id) {
        fileRepo.deleteById(id);
        return "File deleted successfully!";
    }

    @GetMapping("/download/{id}")
    public ResponseEntity<byte[]> downloadFile(@PathVariable Long id) {
        Optional<FileData> fileOpt = fileRepo.findById(id);

        if (fileOpt.isPresent()) {
            FileData file = fileOpt.get();
            HttpHeaders headers = new HttpHeaders();
            headers.setContentDisposition(ContentDisposition.attachment()
                    .filename(file.getFilename())
                    .build());
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);

            return new ResponseEntity<>(file.getContent(), headers, HttpStatus.OK);
        }

        return ResponseEntity.notFound().build();
    }

    @GetMapping("/admin/stats")
    public List<UserUploadStat> getUploadStats() {
        return fileRepo.countFilesByUser();
    }
    
    @PostMapping("/user/search")
    public ResponseEntity<List<FileData>> searchFiles(@RequestParam String keyword) {
        try {
            String encryptedInput = EncryptionUtil.encrypt(keyword.trim().toLowerCase());

            List<FileData> allFiles = fileRepo.findAll();
            List<FileData> matched = new ArrayList<>();

            for (FileData file : allFiles) {
                if (file.getEncryptedKeywords() == null) continue;

                String[] keywords = file.getEncryptedKeywords().split(",");
                for (String ek : keywords) {
                    if (ek.equals(encryptedInput)) {
                        matched.add(file);
                        break;
                    }
                }
            }

            return matched.isEmpty()
                    ? ResponseEntity.status(HttpStatus.NOT_FOUND).body(List.of())
                    : ResponseEntity.ok(matched);

        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(List.of());
        }
    }
}

    


